from typing import List, Tuple

import pandas as pd
from sqlalchemy import select, update
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from database.engine import update_sequence
from database.models import ProgramFile


async def orm_add_program_file(
        session: AsyncSession, program_id: int, read_excel_file: pd.DataFrame
) -> None:
    """
    –î–æ–¥–∞—î –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Ñ–∞–π–ª—É Excel –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.
        read_excel_file (pd.DataFrame): –î–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É Excel.
    """
    try:
        await update_sequence(tabla_value='program_file_id', table_name='program_files',
                              sequence_name='program_files_program_file_id_seq')

        for index, row in read_excel_file.iterrows():
            print('‚ûñ')
            new_detail = ProgramFile(
                program_id=program_id,
                training_number=row["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞‚Ññ"],
                approaches_number=row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤"],
                repetitions_number=str(row["–ü–æ–≤—Ç–æ—Ä–∏"]),
                weight=row["169,9"],
            )

            session.add(new_detail)
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        print('üèãÔ∏è‚Äç', e)
        raise e


async def orm_get_program_files(session: AsyncSession, program_id: int) -> list[int] | None:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–Ω—ñ –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        list[int]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö (–Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è,).
    """
    result = await session.execute(
        select(ProgramFile.training_number)
        .where(ProgramFile.program_id == program_id)
        .order_by(ProgramFile.training_number.asc())
        .distinct()
    )
    res = result.fetchall()
    if res:
        return [res[0] for res in res]


async def orm_next_check_days(session: AsyncSession, program_id: int) -> List[Tuple[int]] | None:
    """
    –ù–∞–¥–∞—î –Ω–∞—Å—Ç—É–ø–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É, –≤ —è–∫–æ—ó —Å—Ç–∞—Ç—É—Å null –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
    session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
    program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
    List[Tuple[int]]: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.
    """
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    program = await orm_check_completed_days(session=session, program_id=program_id)
    if program:
        training_number, _ = program[0]
    else:
        return None

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    query = (select(ProgramFile.training_number)
             .where(ProgramFile.program_id == program_id)
             .where(ProgramFile.training_number == training_number + 1)  # –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
             .where(ProgramFile.program_status.is_(None))  # –°—Ç–∞—Ç—É—Å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ null
             .distinct())

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    result = await session.execute(query)
    next_training = result.fetchone()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    if next_training is None:
        return None  # –Ø–∫—â–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º `training_number + 1` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
    return [next_training]


async def orm_check_completed_days(
        session: AsyncSession, program_id: int
) -> List[Tuple[int, str]]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–Ω—ñ, –≤ —è–∫—ñ –±—É–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ç–∞ —Å—Ç–∞—Ç—É—Å—É.
    """

    result = await session.execute(
        select(ProgramFile.training_number, ProgramFile.program_status)
        .where(ProgramFile.program_id == program_id)
        .where(ProgramFile.program_status.isnot(None))
        .distinct()
        .order_by(ProgramFile.training_number.desc())
    )

    res = result.fetchall()

    return res


async def orm_get_program_file_data(
        session: AsyncSession, program_id: int, training_number: int
) -> List[Tuple[int, int, float, str]]:
    """
    –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.
        training_number (int): –ù–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[Tuple[int, int, float, str]]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤, –≤–∞–≥–∞, —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–∏).
    """
    result = await session.execute(
        select(
            ProgramFile.approaches_number,
            ProgramFile.repetitions_number,
            ProgramFile.weight,
            ProgramFile.program_status
        )
        .where(ProgramFile.training_number == training_number)
        .where(ProgramFile.program_id == program_id)
    )
    return result.fetchall()


async def orm_update_status_program_file(
        session: AsyncSession, program_id: int, training_number: int, program_status: str
) -> None:
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.
        training_number (int): –ù–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.
        program_status (str): –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–∏.
    """
    try:
        await session.execute(
            update(ProgramFile)
            .where(ProgramFile.program_id == program_id)
            .where(ProgramFile.training_number == training_number)
            .values(program_status=program_status)
        )
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        raise e
