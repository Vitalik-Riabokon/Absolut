import os

from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from buttons.utilities_interface_buttons.regulations_menu_button import regulations_menu
from middlewares.DelMessages import MessageLoggingMiddleware

regulations_router = Router()


async def search_file(file_name: str) -> FSInputFile:
    for root, dirs, files in os.walk('.'):
        if file_name in files:
            file_path = os.path.join(root, file_name)
            break

    return FSInputFile(file_path)


@regulations_router.callback_query(F.data == "regulations")
async def handler_regulations(callback_query: CallbackQuery, bot: Bot, session: AsyncSession,
                              logger: MessageLoggingMiddleware):
    await logger.del_all_messages(bot, callback_query.message)
    await callback_query.message.answer("–©–æ –±–∞–∂–∞—î—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å?", reply_markup=await regulations_menu())


@regulations_router.callback_query(F.data == "strict_bips")
async def handler_strict_bips(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback_query.message.delete()
    file_name = '–°—Ç—Ä–æ–≥–∏–π –±—ñ—Ü–ø—Å.png'
    photo = await search_file(file_name)
    await callback_query.message.answer_photo(photo=photo,
                                              caption='–ù–æ—Ä–º–∞—Ç–∏–≤–∏ –ø–æ —Å—Ç—Ä–æ–≥–æ–º—É –ø—ñ–¥–π–æ–º—ñ –Ω–∞ –±—ñ—Ü–µ–ø—Å –±–µ–∑ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –∑ –¥–æ–ø—ñ–Ω–≥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
                                              reply_markup=InlineKeyboardMarkup(
                                                  inline_keyboard=[
                                                      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô",
                                                                            callback_data="regulations")],
                                                  ]
                                              ), )


@regulations_router.callback_query(F.data == "army_press")
async def handler_army_press(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback_query.message.delete()
    file_name = '–ê—Ä–º—ñ–π—Å—å–∫–∏–π –∂–∏–º.png'
    photo = await search_file(file_name)
    await callback_query.message.answer_photo(photo=photo,
                                              caption='–ù–æ—Ä–º–∞—Ç–∏–≤–∏ –ø–æ –∞—Ä–º—ñ–π—Å—å–∫–æ–º—É –∂–∏–º–æ–≤—ñ –±–µ–∑ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –∑ –¥–æ–ø—ñ–Ω–≥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
                                              reply_markup=InlineKeyboardMarkup(
                                                  inline_keyboard=[
                                                      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô",
                                                                            callback_data="regulations")],
                                                  ]
                                              ), )


@regulations_router.callback_query(F.data == "deadlift")
async def handler_deadlift(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback_query.message.delete()
    file_name = '–°—Ç–∞–Ω–æ–≤–∞ —Ç—è–≥–∞.png'
    photo = await search_file(file_name)
    await callback_query.message.answer_photo(photo=photo,
                                              caption='–ù–æ—Ä–º–∞—Ç–∏–≤–∏ –ø–æ —Å—Ç–∞–Ω–æ–≤—ñ —Ç—è–∑—ñ –±–µ–∑ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –∑ –¥–æ–ø—ñ–Ω–≥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
                                              reply_markup=InlineKeyboardMarkup(
                                                  inline_keyboard=[
                                                      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô",
                                                                            callback_data="regulations")],
                                                  ]
                                              ), )


@regulations_router.callback_query(F.data == "squat")
async def handler_squat(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback_query.message.delete()
    file_name = '–ü—Ä–∏—Å—è–¥.png'
    photo = await search_file(file_name)
    await callback_query.message.answer_photo(photo=photo,
                                              caption='–ù–æ—Ä–º–∞—Ç–∏–≤–∏ –ø–æ –ø—Ä–∏—Å—è–¥—É –±–µ–∑ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –∑ –¥–æ–ø—ñ–Ω–≥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
                                              reply_markup=InlineKeyboardMarkup(
                                                  inline_keyboard=[
                                                      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô",
                                                                            callback_data="regulations")],
                                                  ]
                                              ), )


@regulations_router.callback_query(F.data == "bench_press")
async def handler_bench_press(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback_query.message.delete()
    file_name = '–ñ–∏–º –ª–µ–∂–∞—á–∏.png'
    photo = await search_file(file_name)
    await callback_query.message.answer_photo(photo=photo,
                                              caption='–ù–æ—Ä–º–∞—Ç–∏–≤–∏ –ø–æ –∂–∏–º—É –ª–µ–∂–∞—á–∏ –±–µ–∑ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∏ –∑ –¥–æ–ø—ñ–Ω–≥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
                                              reply_markup=InlineKeyboardMarkup(
                                                  inline_keyboard=[
                                                      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô",
                                                                            callback_data="regulations")],
                                                  ]
                                              ), )


@regulations_router.callback_query(F.data == "tribalism")
async def handler_tribalism(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback_query.message.delete()
    file_name = '–¢—Ä–∏–±–æ—Ä—Å—Ç–≤–æ.png'
    photo = await search_file(file_name)
    await callback_query.message.answer_photo(photo=photo,
                                              caption='–°—É–º–∞ —Ç—Ä—å–æ—Ö –≤–ø—Ä–∞–≤ —É –∫—ñ–ª–æ–≥—Ä–∞–º–∞—ó –∑ –¥–æ–ø—ñ–Ω–≥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
                                              reply_markup=InlineKeyboardMarkup(
                                                  inline_keyboard=[
                                                      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô",
                                                                            callback_data="regulations")],
                                                  ]
                                              ))
